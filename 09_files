Opening and Closing Files
The open Function
Before you can read or write a file, you have to open it using Python's built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it.
Syntax
file object = open(file_name [, access_mode][, buffering])
file_name: The file_name argument is a string value that contains the name of the file that you want to access.
access_mode: The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc.
buffering: If the buffering value is set to 0, no buffering takes place. If the buffering value is 1, line buffering is performed while accessing a file. 

Modes 	Description
r	      Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.
rb	    Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.
r+	    Opens a file for both reading and writing. The file pointer placed at the beginning of the file.
rb+	    Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.
w	      Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
wb	    Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
w+	    Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.
wb+	    Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.
a	      Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.
ab	    Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.
a+	    Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.
ab+	  Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.

The file Object Attributes
Once a file is opened and you have one file object, you can get various information related to that file.

file.closed	Returns true if file is closed, false otherwise.
file.mode	Returns access mode with which file was opened.
file.name	Returns name of the file.

fo = open("foo.txt", "wb")
print "Name of the file: ", fo.name
print "Closed or not : ", fo.closed
print "Opening mode : ", fo.mode

The close() Method
The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done.
fileObject.close();

fo = open("foo.txt", "wb")
print "Name of the file: ", fo.name
# Close opend file
fo.close()

Reading and Writing Files

The write() Method
The write() method writes any string to an open file. It is important to note that Python strings can have binary data and not just text.
fo = open("foo.txt", "wb")
fo.write( "Python is a great language.\nYeah its great!!\n");
# Close opend file
fo.close()

The read() Method
The read() method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data.

fo = open("foo.txt", "r+")
str = fo.read(10);
print "Read String is : ", str
# Close opend file
fo.close()







